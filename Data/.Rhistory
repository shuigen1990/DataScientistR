mini_iris <- iris[c(1, 51, 101), ]
mini_iris
tidyr::gather(sdat,"store_exp","online_exp",5:6)
tidyr::gather(sdat,"exp_source","value",5:6)
gather(mini_iris, key = flower_att, value = measurement,
Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
tidyr::gather(sdat,"exp_source","value",5:6)
(mdat <- melt(sdat, measure.vars=c("store_exp","online_exp")))
tidyr::gather(sdat,"variable","value",5:6)
tidyr::gather(sdat,"variable","value",store_exp,online_exp)
mini_iris
sdat%>%gather("variable","value",store_exp,online_exp)
df <- data.frame(x = c(NA, "a.b", "a.d", "b.c"))
df
df %>% separate(x, c("A", "B"))
df <- data.frame(x = c("x: 123", "y: error: 7"))
df
df %>% separate(x, c("key", "value"), ": ", extra = "merge")
df %>% separate(x, c("key", "value"), ": ")
df <- data.frame(x = c("a", "a b", "a b c", NA))
df
df %>% separate(x, c("a", "b"))
df %>% separate(x, c("a", "b"), extra = "drop", fill = "right")
df %>% separate(x, c("a", "b"), extra = "merge", fill = "left")
df %>% separate(x, c("key", "value"), ": ", extra = "merge",fill="left")
df <- data.frame(x = c("x: 123", "y: error: 7"))
df %>% separate(x, c("key", "value"), ": ", extra = "merge",fill="left")
df %>% separate(x, c("key", "value"), ": ", extra = "merge",fill="right")
head(mdat)
head(sdat)
names(sim.dat)
sdat<-dplyr::select(sim.dat,age,gender,store_exp,store_trans)
sdat<-dplyr::select(1:5,sim.dat,age,gender,store_exp,store_trans)
sdat<-sim.dat[1:5,]%>%
dplyr::select(age,gender,store_exp,store_trans)
sdat
sdat<-sim.dat[1:5,]%>%
dplyr::select(age,gender,store_exp,store_trans)%>%
tbl_df()
tbl_df(sdat)
sim.dat[1:5,]%>%
dplyr::select(age,gender,store_exp,store_trans)%>%
tbl_df()
sdat%>%tbl_df()
tidyr::gather(sdat,"variable","value",store_exp,store_trans)
melt(sdat, measure.vars=c("store_exp","store_trans"))
sdat%>%gather("variable","value",store_exp,store_trans)
sdat%>%separate(variable)
sdat%>%separate(variable,c("Source","Type"))
sdat%>%separate(variable,c("Source","Type"),sep="_")
separate(sdat,variable,c("Source","Type"),sep="_")
separate(sdat,col=variable,c("Source","Type"),sep="_")
sdat<-sim.dat[1:5,]%>%
dplyr::select(age,gender,store_exp,store_trans)%>%
sdat
sdat<-sim.dat[1:5,]%>%
dplyr::select(age,gender,store_exp,store_trans)
sdat
separate(variable,c("Source","Type"))
sdat %>% separate(variable,c("Source","Type"))
sdat
sdat
tidyr::gather(sdat,"variable","value",store_exp,store_trans)
sdat %>% tbl_df()
msdat %>% tbl_df()
msdat<-tidyr::gather(sdat,"variable","value",store_exp,store_trans)
msdat %>% tbl_df()
msdat %>% separate(variable,c("Source","Type"))
sepdat %>% tbl_df()
sepdat<- msdat %>% separate(variable,c("Source","Type"))
sepdat %>% tbl_df()
sepdat %>% unite(Source,Type,sep="_")
sepdat %>% unite("variable",Source,Type,sep="_")
msdat<-tidyr::gather(sdat,"variable","value",store_exp,store_trans)
msdat %>% tbl_df()
msdat
msdat %>% spread(variable,value)
df <- data.frame(x = c("a", "b"), y = c(3, 4), z = c(5, 6))
df
df %>% spread(x, y)
df %>% spread(y, z)
sim.dat<-read.csv("/Users/happyrabbit/Documents/GitHub/DataScientistR/Data/SegData.csv")
apply(sim.dat,2,class)
apply(sim.dat,1,class)
apply(sim.dat,2,class)
library(grplasso)
nf<-800
timestamp()->t1
##------ Sun Jun 26 20:57:46 2016 ------##
for (j in 1:20){
set.seed(19870+j)
x<-c('A','B','C')
sim.da1<-NULL
for (i in 1:nf){
# sample(x, 120, replace=TRUE)->sam
sim.da1<-rbind(sim.da1,sample(x, 120, replace=TRUE))
}
data.frame(sim.da1)->sim.da1
#str(sim.da1)
paste("Q", 1:120, sep = "")->col
paste("Farm", 1:nf, sep = "")->row
colnames(sim.da1)<-col
rownames(sim.da1)<-row
library(nnet)
dummy.sim1<-NULL
for (k in 1:ncol(sim.da1)) {
tmp=class.ind(sim.da1[,k])
colnames(tmp)=paste(col[k],colnames(tmp))
dummy.sim1=cbind(dummy.sim1,tmp)
}
nf<-800
for (j in 1:20){
set.seed(19870+j)
x<-c('A','B','C')
sim.da1<-NULL
for (i in 1:nf){
# sample(x, 120, replace=TRUE)->sam
sim.da1<-rbind(sim.da1,sample(x, 120, replace=TRUE))
}
library(readr)
nf<-800
x<-c('A','B','C')
sim.da1<-NULL
for (i in 1:nf){
# sample(x, 120, replace=TRUE)->sam
sim.da1<-rbind(sim.da1,sample(x, 120, replace=TRUE))
}
data.frame(sim.da1)->sim.da1
paste("Q", 1:120, sep = "")->col
paste("Farm", 1:nf, sep = "")->row
colnames(sim.da1)<-col
rownames(sim.da1)<-row
library(nnet)
View(sim.da1)
library(nnet)
dummy.sim1<-NULL
for (k in 1:ncol(sim.da1)) {
tmp=class.ind(sim.da1[,k])
colnames(tmp)=paste(col[k],colnames(tmp))
dummy.sim1=cbind(dummy.sim1,tmp)
}
library(dplyr)
glimpes(dummy.sim1)
glimpse(dummy.sim1)
data.frame(dummy.sim1)->dummy.sim1
# 得到r=1 时每个农场对应的爆发概率hp1
c(rep(c(1,0,-1),40),rep(c(1,0,0),40),rep(c(0,0,0),40))->s1
as.matrix(dummy.sim1)%*%s1-40/3->link1
exp(link1)/(exp(link1)+1)->hp1
# 基于爆发概率hp1，抽取相应的因变量res
res<-rep(9,nf)
for (i in 1:nf){
sample( c(1,0),1,prob=c(hp1[i],1-hp1[i]))->res[i]
}
dummy1$y<-res
da1<-dummy1
y<-da1$y
ind<-NULL
for (i in 1:120){
c(ind,rep(i,2))->ind
}
da2<-rbind(da1[,1:240],ind)
da3<-da1[,1:240]
base.idx<-3*c(1:120)
dummy1<-dummy.sim1[,-base.idx]
dummy1$y<-res
da1<-dummy1
y<-da1$y
ind<-NULL
for (i in 1:120){
c(ind,rep(i,2))->ind
}
da2<-rbind(da1[,1:240],ind)
da3<-da1[,1:240]
install.packages(c("repr","pbd290"))
install.packages("repr")
install.packages(c('repr', 'pbdZMQ', 'devtools'))
install.packages(c('pbdZMQ'))
library(devtools)
devtools::install_github('IRkernel/IRdisplay')
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
library(devtools)
library(dplyr)
install_github("rstudio/sparklyr")
install_github("rstudio/sparklyr",force = TRUE)
install.packages("SparkR")
install_github("rstudio/RcppParallel")
install.packages("RcppParallel")
install.packages("microbenchmark")
df<-data.frame(xyz="a")
df$x
df$y
df<-data.frame(xyz="a",xz="b")
df
df$x
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
library(tibble)
install.packages("USAboundaries")
library(USAboundaries)
install.packages("ggstat)
install.packages("ggstat")
devtools::install_github("hadley/ggstat")
library(ggstat)
install.packages("ggvis")
library(ggvis)
library(ggplot2)
ggplot(mtcars,aes(mpg,wt))+geom_point()
install.packages("lazyeval")
library(lazyeval)
vignette("lazyeval")
install_github("rstudio/sparklyr")
library(devtools)
install_github("rstudio/sparklyr")
library(sparklyr)
spark_install(version = "1.6.1")
460/38
airline.mean<-select(airline,-ID)%>%
# 按Airline对数据进行分组总结
group_by(Airline)%>%
# 对每个数值
summarise_each(funs(mean))%>%
# 显示数据
glimpse()
airline<-read.csv("/Users/happyrabbit/Documents/GitHub/DataScientistR/Data/AirlineRating.csv")
glimpse(airline)
# 我们用`corrplot()`函数检查问卷调查问题的相关性：
# 选取其中的问卷调查项
select(airline,Easy_Reservation:Recommend)%>%
# 得到相关矩阵
cor()%>%
# 用corrplot()绘制相关图
# 选项order="hclust"按照变量的相似度，基于系统聚类的结果对行列进行重新排列
corrplot(,order="hclust")
library(readr)
library(dplyr)
library(corrplot)
airline<-read.csv("/Users/happyrabbit/Documents/GitHub/DataScientistR/Data/AirlineRating.csv")
glimpse(airline)
# 我们用`corrplot()`函数检查问卷调查问题的相关性：
# 选取其中的问卷调查项
select(airline,Easy_Reservation:Recommend)%>%
# 得到相关矩阵
cor()%>%
# 用corrplot()绘制相关图
# 选项order="hclust"按照变量的相似度，基于系统聚类的结果对行列进行重新排列
corrplot(,order="hclust")
select(airline,Easy_Reservation:Recommend)%>%
# 得到相关矩阵
cor()%>%
# 用corrplot()绘制相关图
# 选项order="hclust"按照变量的相似度，基于系统聚类的结果对行列进行重新排列
corrplot(,order="hclust")
airline.mean<-select(airline,-ID)%>%
# 按Airline对数据进行分组总结
group_by(Airline)%>%
# 对每个数值
summarise_each(funs(mean))%>%
# 显示数据
glimpse()
airline.mean.pc<-select(airline.mean,Easy_Reservation:Recommend)%>%
prcomp()
biplot(airline.mean.pc,family ="Songti SC",main="聚合后PCA结果双标图",
cex=0.7, expand=2,xlim=c(-0.8, 1),ylim=c(-0.7,0.8))
airline%>%
subset(select=Easy_Reservation:Recommend)%>%
factanal(factors=3)
airline%>%
subset(select=Easy_Reservation:Recommend)%>%
factanal(factors=3,rotation="oblimin")
library(GPArotation)
airline%>%
subset(select=Easy_Reservation:Recommend)%>%
factanal(factors=3,rotation="oblimin")
airline.fa<-airline%>%
subset(select=Easy_Reservation:Recommend)%>%
factanal(factors=3,rotation="oblimin")
library(gplots)
heatmap.2(airline.fa$loadings,
col=brewer.pal(9,"YlGn"),trace="none",key=FALSE,dend="none",cexCol=0.6,cexRow =1)
title(family ="Songti SC",
main="航空公司满意度因子载荷")
library(gplots)
library(RColorBrewer)
# 绘制热图
heatmap.2(airline.fa$loadings,
col=brewer.pal(9,"YlGn"),trace="none",key=FALSE,dend="none",cexCol=0.6,cexRow =1)
title(family ="Songti SC",
main="航空公司满意度因子载荷")
library(semPlot)
fa.score<-airline%>%
subset(select=Easy_Reservation:Recommend)%>%
factanal(factors=3,rotation="oblimin",scores="Bartlett")
fa.score
airline.fa<-airline%>%
subset(select=Easy_Reservation:Recommend)%>%
factanal(factors=3,rotation="oblimin",scores="Bartlett")
fa.score<-airline.fa$scores%>%
data.frame()
fa.score
head(fa.score)
fa.score$Airline<-airline$Airline
fa.score%>%
group_by(Airline)%>%
summarise(Factor1=mean(Factor1),
Factor2=mean(Factor2),
Factor3=mean(Factor3))
fa.score.mean<-fa.score%>%
group_by(Airline)%>%
summarise(Factor1=mean(Factor1),
Factor2=mean(Factor2),
Factor3=mean(Factor3))
row.names(fa.score.mean)
row.names(fa.score.mean)<-fa.score.mean$Airline
row.names(fa.score.mean)
fa.score.mean<-select(fa.score.mean,-Airline)
heatmap.2(fa.score.mean,
col=brewer.pal(9,"YlGn"),trace="none",key=FALSE,dend="none",cexCol=0.6,cexRow =1)
title(family ="Songti SC",
main="航空公司满意度平均因子分值")
View(fa.score.mean)
fa.score.mean
fa.score.mean<-fa.score%>%
group_by(Airline)%>%
summarise(Factor1=mean(Factor1),
Factor2=mean(Factor2),
Factor3=mean(Factor3))
fa.score.mean
row.names(fa.score.mean)<-as.character(fa.score.mean$Airline)
fa.score.mean<-select(fa.score.mean,-Airline)
heatmap.2(fa.score.mean,
col=brewer.pal(9,"YlGn"),trace="none",key=FALSE,dend="none",cexCol=0.6,cexRow =1)
title(family ="Songti SC",
main="航空公司满意度平均因子分值")
heatmap.2(as.matrix(fa.score.mean),
col=brewer.pal(9,"YlGn"),trace="none",key=FALSE,dend="none",cexCol=0.6,cexRow =1)
title(family ="Songti SC",
main="航空公司满意度平均因子分值")
library(readr)
library(dplyr)
library(corrplot)
# gplots是可视化包
library(gplots)
# RColorBrewer包用于设计图形的调色盘
# 相关信息见：http://colorbrewer2.org
library(RColorBrewer)
airline<-read.csv("https://raw.githubusercontent.com/happyrabbit/DataScientistR/master/Data/AirlineRating.csv")
glimpse(airline)
library(GPArotation)
airline.fa<-airline%>%
subset(select=Easy_Reservation:Recommend)%>%
factanal(factors=3,rotation="oblimin")
airline.fa
airline.fa<-airline%>%
subset(select=Easy_Reservation:Recommend)%>%
factanal(factors=3,rotation="oblimin",scores="Bartlett")
fa.score<-airline.fa$scores%>%
data.frame()
fa.score$Airline<-airline$Airline
fa.score.mean<-fa.score%>%
group_by(Airline)%>%
summarise(Factor1=mean(Factor1),
Factor2=mean(Factor2),
Factor3=mean(Factor3))
fa.score.mean
heatmap.2(as.matrix(fa.score.mean),
col=brewer.pal(9,"YlGn"),trace="none",key=FALSE,dend="none",cexCol=0.6,cexRow =1)
title(family ="Songti SC",
main="航空公司满意度平均因子分值")
row.names(fa.score.mean)<-as.character(fa.score.mean$Airline)
fa.score.mean<-select(fa.score.mean,-Airline)
heatmap.2(as.matrix(fa.score.mean),
col=brewer.pal(9,"YlGn"),trace="none",key=FALSE,dend="none",cexCol=0.6,cexRow =1)
title(family ="Songti SC",
main="航空公司满意度平均因子分值")
library(psych)
airline<-read.csv("/Users/happyrabbit/Documents/GitHub/DataScientistR/Data/AirlineRating.csv")
library(readr)
library(dplyr)
library(GPArotation)
airline%>%
subset(select=Easy_Reservation:Recommend)%>%
factanal(factors=3,rotation="oblimin")
install.packages(c("devtools", "ggvis", "googleVis", "httr", "multcomp", "psych", "rmarkdown", "rstudioapi", "visNetwork"))
library(readr)
library(dplyr)
airline<-read.csv("/Users/happyrabbit/Documents/GitHub/DataScientistR/Data/AirlineRating.csv")
var.dist<-airline%>%
subset(select=Easy_Reservation:Recommend)%>%
dist()
var.mds<-cmdscale(var.dist)
plot(var.mds)
head(var.mds)
setwd("/Users/happyrabbit/Documents/GitHub/DataScientistR/Data")
library(lubridate)
date<-now()
date
day(date)<-1
date
date<-now()
date_start<-now()
date_end<-ymd("2017-3-31")
span<-date_end-date_start
date_end<-ymd("2017-3-31 12:00:00")
date_end<-ymd_hms("2017-3-31 12:00:00")
span<-date_end-date_start
as.duration(span)
setwd("/Users/happyrabbit/Documents/GitHub/DataScientistR/Data")
View(var.mds)
write.csv(var.mds,"var.mds.csv",row.names=F)
var.mds<-read.csv("/Users/happyrabbit/Documents/GitHub/DataScientistR/Data/var.mds.csv")
head(var.mds)
names(var.mds)<-c("Score1","Score2")
write.csv(var.mds,"var.mds.csv",row.names=F)
head(var.mds)
plot(var.mds)
airline.mean<-select(airline,-ID)%>%
# 按Airline对数据进行分组总结
group_by(Airline)%>%
# 对每个数值
summarise_each(funs(mean))%>%
# 显示数据
glimpse()
mean.dist<-airline.mean%>%
dist()
mean.dist<- %>%
airline.mean
var.mds
mean.mds<-cmdscale(mean.dist)
mean.dist<-airline.mean%>%
dist()
mean.dist
# 将航空公司设置成行名称然后将对应的字符列删除
row.names(airline.mean)<-airline.mean$Airline
group_by(Airline)%>%
airline.mean
airline.mean<-select(airline.mean,-Airline)
airline.mean
mean.dist<-airline.mean%>%
dist()
mean.dist
mean.mds<-cmdscale(mean.dist)
mean.mds
names(mean.mds)<-c("Score1","Score2")
plot(mean.mds)
row.names(airline.mean)
mean.mds
plot(mean.mds,type="n")
text(mean.mds,row.names(mean.mds),cex=2)
text(mean.mds,row.names(mean.mds),cex=1)
plot(mean.mds,type="n")
text(mean.mds,row.names(mean.mds),cex=1)
plot(mean.mds,type="n",xlim=c(-8,4),ylim=c(-5,5))
text(mean.mds,row.names(mean.mds),cex=1)
plot(mean.mds,type="n",xlim=c(-8,6),ylim=c(-5,6))
text(mean.mds,row.names(mean.mds),cex=1)
names(mean.mds)<-c("Score1","Score2")
plot(mean.mds,type="n",xlim=c(-8,6),ylim=c(-5,6))
text(mean.mds,row.names(mean.mds),cex=1)
mean.mds
names(mean.mds)<-c("Score1","Score2")
names(mean.mds)
mean.mds<-data.frame(cmdscale(mean.dist))
mean.mds
mean.dist<-airline.mean%>%
dist()
mean.mds<-cmdscale(mean.dist)%>%
data.frame()
names(mean.mds)<-c("Score1","Score2")
plot(mean.mds,type="n",xlim=c(-8,6),ylim=c(-5,6))
text(mean.mds,row.names(mean.mds),cex=1)
mean.rank<-sapply(airline.mean,function(x)orderd(rank(x)))
mean.rank<-sapply(airline.mean,function(x) orderd(rank(x)))
mean.rank<-sapply(airline.mean,function(x) order(rank(x)))
mean.rank
glimpse(mean.rank)
mean.rank<-sapply(airline.mean,function(x) order(rank(x)))%>%
data.frame()
glimpse(mean.rank)
mean.rank<-sapply(airline.mean,function(x) factor(rank(x),ordered=T))%>%
data.frame()
glimpse(mean.rank)
mean.rank<-lapply(airline.mean,function(x) factor(rank(x),ordered=T))%>%
data.frame()
glimpse(mean.rank)
mean.rank<-lapply(airline.mean,function(x) order(rank(x)))%>%
data.frame()
glimpse(mean.rank)
mean.rank<-lapply(airline.mean,function(x) factor(rank(x),ordered=T))%>%
data.frame()
glimpse(mean.rank)
library(cluster)
mean.rank.gower<-daisy(mean.rank,metric="gower")
mean.mds.gower<-isoMDS(mean.rank.gower)
mean.rank.gower<-daisy(mean.rank,metric="gower")
mean.mds.gower<-isoMDS(mean.rank.gower)
library(MASS)
mean.mds.gower<-isoMDS(mean.rank.gower)
plot(mean.mds.gower$points,type="n",xlim=c(-8,6),ylim=c(-5,6))
text(mean.mds.gower$points,row.names(mean.mds),cex=1)
plot(mean.mds.gower$points,type="n")
text(mean.mds.gower$points,row.names(mean.mds),cex=1)
plot(mean.mds.gower$points,type="n",xlim=c(-0.4,-0.4),ylim=c(-0.2,0.3))
text(mean.mds.gower$points,row.names(mean.mds),cex=1)
plot(mean.mds.gower$points,type="n",xlim=c(-0.4,0.4),ylim=c(-0.2,0.3))
text(mean.mds.gower$points,row.names(mean.mds),cex=1)
plot(mean.mds.gower$points,type="n",xlim=c(-0.4,0.4),ylim=c(-0.2,0.4))
text(mean.mds.gower$points,row.names(mean.mds),cex=1)
plot(mean.mds.gower$points,type="n",xlim=c(-0.5,0.5),ylim=c(-0.2,0.4))
text(mean.mds.gower$points,row.names(mean.mds),cex=1)
